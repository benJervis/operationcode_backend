FORMAT: 1A
HOST: https://operationcode.org/

# Operation Code API Documentation

API endpoints that Operation Code's Rails backend makes available to its React frontend.

## CodeSchool | Collection [/api/v1/code_schools]

### List All CodeSchool Members [GET]

+ Response 200 (application/json)

        [
            {
                "id": 112,
                "name": "Wyncode Academy",
                "url": "http://wyncode.co",
                "logo": "https://raw.githubusercontent.com/OperationCode/operationcode_frontend/master/src/images/codeSchoolLogos/wyncode.jpg",
                "full_time": true,
                "hardware_included": false,
                "has_online": false,
                "online_only": false,
                "created_at": "2017-09-21T05:48:50.056Z",
                "updated_at": "2017-09-21T05:48:50.056Z",
                "notes": null
            },
            {
                "id": 113,
                "name": "Nashville Software School",
                "url": "http://nashvillesoftwareschool.com/",
                "logo": "https://raw.githubusercontent.com/OperationCode/operationcode_frontend/master/src/images/codeSchoolLogos/nss.jpg",
                "full_time": true,
                "hardware_included": false,
                "has_online": false,
                "online_only": false,
                "created_at": "2017-09-21T05:48:50.108Z",
                "updated_at": "2017-09-21T05:48:50.108Z",
                "notes": null
            }
        ]

## CodeSchool | Create [/api/v1/code_schools{?name,url,logo,full_time,hardware_included,has_online,online_only,notes}]
+ Parameters

  + name (string, required) - The CodeSchool's name
  + url (string, required) - The CodeSchool's url for homepage
  + logo (string, required) - The CodeSchool's logo url
  + full_time (boolean, required) - Are the CodeSchool's courses full time
  + hardware_included (boolean, required) - Is Hardware included with the CodeSchool
  + has_online (boolean, required) - Does the CodeSchool have an online component
  + online_only (boolean, required) - Is the CodeSchool online only?
  + notes (text, optional) - Any additional information about the CodeSchool

### Create a CodeSchool Member [POST]

  + Request (application/json)

      + Headers

              Authorization: Bearer Access-Token

      + Body

                  {
                      "code_school": {
                      "name": "CoderSchool",
                      "url": "http://www.CoderSchool.vn",
                      "logo": "https://d388w23p6r1vqc.cloudfront.net/img/startups/11852/logo-1457327647.png",
                      "full_time": "false",
                      "hardware_included": "false",
                      "has_online": "true",
                      "online_only": "false"
                      }
                  }

  + Response 201 (application/json)

      + Body

              {
                  "code_school": 182
              }

  + Response 422 (application/json)

          {
              errors: "Some error message"
          }

## CodeSchool | Show or Delete [/api/v1/code_schools/{code_school_id}]
+ Parameters

    + code_school_id (number) - ID of the CodeSchool in the form of an integer

### Get an Existing CodeSchool [GET]

+ Response 200 (application/json)

        {
            "id": 180,
            "name": "CoderSchool",
            "url": "http://www.CoderSchool.vn",
            "logo": "https://d388w23p6r1vqc.cloudfront.net/img/startups/11852/logo-1457327647.png",
            "full_time": false,
            "hardware_included": false,
            "has_online": true,
            "online_only": false,
            "created_at": "2017-09-26T06:54:58.607Z",
            "updated_at": "2017-09-26T06:54:58.607Z",
            "notes": null
        }

+ Response 404 (application/json)

        {
            error: 'No such record'
        }

### Delete an Existing CodeSchool [DELETE]

  + Request (application/json)

      + Headers

              Authorization: Bearer Access-Token

      + Body

              {
                  "id": 1
              }

  + Response 200 (application/json)

      + Body

              {
                  status: 200
              }

  + Response 422 (application/json)

      + Body

              {
                  errors: "Some error message"
              }

## CodeSchool | Update [/api/v1/code_schools/{code_school_id}{?name,url,logo,full_time,hardware_included,has_online,online_only,notes}]

+ Parameters

    + name (string, required) - The CodeSchool's name
    + url (string, required) - The CodeSchool's url for homepage
    + logo (string, required) - The CodeSchool's logo url
    + full_time (boolean, required) - Are the CodeSchool's courses full time
    + hardware_included (boolean, required) - Is Hardware included with the CodeSchool
    + has_online (boolean, required) - Does the CodeSchool have an online component
    + online_only (boolean, required) - Is the CodeSchool online only?
    + notes (text, optional) - Any additional information about the CodeSchool

### Update an Existing CodeSchool [PUT]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                "code_school": {
                  "name": "CoddderrrSchool"
                }
            }

+ Response 200 (application/json)

    + Body

            {
                status: 200
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## GitHub Statistic | OC Averages [/api/v1/git_hub_statistics/averages{?start_date,end_date}]

+ Parameters

    + start_date (string, optional) - Sets the start date for the query, regarding the statistic's "completed on" value (i.e. 2016-10-21).  Defaults to '1970-01-01'
    + end_date (string, optional) - Sets the end date for the query, regarding the statistic's "completed on" value (i.e. 2016-11-21).  Defaults to 'Date.today'

### Averages Across All Operation Code Repositories [GET]

+ Response 200 (application/json)

        {
            "average_commits_per_user": 25,
            "average_closed_prs_per_user": 3,
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## GitHub Statistic | OC Totals [/api/v1/git_hub_statistics/totals{?start_date,end_date}]

+ Parameters

    + start_date (string, optional) - Sets the start date for the query, regarding the statistic's "completed on" value (i.e. 2016-10-21).  Defaults to '1970-01-01'
    + end_date (string, optional) - Sets the end date for the query, regarding the statistic's "completed on" value (i.e. 2016-11-21).  Defaults to 'Date.today'

### Totals Across All Operation Code Repositories [GET]

+ Response 200 (application/json)

        {
            "total_repositories": 4,
            "total_closed_pull_requests": 144,
            "total_closed_issues": 50,
            "total_commits": 475,
            "total_users": 31,
            "total_additions": 43848,
            "total_deletions": 35676
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## GitHub Statistic | Totals by Repository [/api/v1/git_hub_statistics/by_repository{?start_date,end_date}]

+ Parameters

    + start_date (string, optional) - Sets the start date for the query, regarding the statistic's "completed on" value (i.e. 2016-10-21).  Defaults to '1970-01-01'
    + end_date (string, optional) - Sets the end date for the query, regarding the statistic's "completed on" value (i.e. 2016-11-21).  Defaults to 'Date.today'

### Totals Broken Out Repository [GET]

+ Response 200 (application/json)

        {
            "operationcode": {
                "total_closed_pull_requests": 2,
                "total_closed_issues": 1,
                "total_commits": 8,
                "total_users": 2,
                "total_additions": 3,
                "total_deletions": 3
            },
            "operationcode_backend": {
                "total_closed_pull_requests": 32,
                "total_closed_issues": 10,
                "total_commits": 122,
                "total_users": 13,
                "total_additions": 5942,
                "total_deletions": 359
            },
            "operationcode_frontend": {
                "total_closed_pull_requests": 100,
                "total_closed_issues": 30,
                "total_commits": 334,
                "total_users": 21,
                "total_additions": 37806,
                "total_deletions": 35127
            },
            "operationcode_bot": {
                "total_closed_pull_requests": 10,
                "total_closed_issues": 3,
                "total_commits": 11,
                "total_users": 6,
                "total_additions": 97,
                "total_deletions": 187
            }
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## GitHub Statistic | Totals for User [/api/v1/git_hub_statistics/for_user{?git_hub_login,start_date,end_date}]

+ Parameters

    + git_hub_login (string, required) - The GitHub login for the given user (i.e. "hollomancer")
    + start_date (string, optional) - Sets the start date for the query, regarding the statistic's "completed on" value (i.e. 2016-10-21).  Defaults to '1970-01-01'
    + end_date (string, optional) - Sets the end date for the query, regarding the statistic's "completed on" value (i.e. 2016-11-21).  Defaults to 'Date.today'

### Totals For A Given User [GET]

+ Response 200 (application/json)

        {
            "total_closed_pull_requests": 23,
            "total_closed_issues": 4,
            "total_commits": 11,
            "total_additions": 1248,
            "total_deletions": 408
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## GitHub Statistic | Totals for a User in a Repository [/api/v1/git_hub_statistics/user_in_repository{?git_hub_login,repository,start_date,end_date}]

+ Parameters

    + git_hub_login (string, required) - The GitHub login for the given user (i.e. "hollomancer")
    + repository (string, required) - The name of the GitHub repository (i.e. "operationcode_frontend")
    + start_date (string, optional) - Sets the start date for the query, regarding the statistic's "completed on" value (i.e. 2016-10-21).  Defaults to '1970-01-01'
    + end_date (string, optional) - Sets the end date for the query, regarding the statistic's "completed on" value (i.e. 2016-11-21).  Defaults to 'Date.today'

### Totals For A Given User in a Given Repository [GET]

+ Response 200 (application/json)

        {
            "total_closed_pull_requests": 23,
            "total_closed_issues": 4,
            "total_commits": 11,
            "total_additions": 1248,
            "total_deletions": 408
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Resource [/api/v1/resources/{resource_id}]

+ Parameters

    + resource_id (number) - ID of the Resource in the form of an integer

### View a Resource's Detail [GET]

+ Response 200 (application/json)

        {
            "id": 53,
            "name": "The Code Player",
            "url": "http://thecodeplayer.com/",
            "category": "Tutorials",
            "language": "multiple",
            "paid": false,
            "notes": null,
            "votes_count": 5,
            "created_at": "2017-07-01T22:01:50.324Z",
            "updated_at": "2017-07-01T22:01:50.324Z"
        }

### Delete an Existing Resource [DELETE]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                "resource": {
                    "id": 1
                }
            }

+ Response 200 (application/json)

    + Body

            {
                status: 200
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Resource | Collection [/api/v1/resources{?tags}]

### List All Resources [GET]

+ Parameters

    + tags (string, optional) - Comma-separated list of tags to filter the search results on (i.e. "books, videos")

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Free Programming Books",
                "url": "https://github.com/vhf/free-programming-books",
                "category": "Books",
                "language": "multiple",
                "paid": false,
                "notes": "Wiki book on everything computers",
                "votes_count": 3,
                "created_at": "2017-07-01T22:01:48.966Z",
                "updated_at": "2017-07-01T22:01:48.966Z"
            },
            {
                "id": 2,
                "name": "Packtpub free programming books",
                "url": "https://www.packtpub.com/packt/offers/free-learning",
                "category": "Books",
                "language": "multiple",
                "paid": false,
                "notes": null,
                "votes_count": 0,
                "created_at": "2017-07-01T22:01:49.145Z",
                "updated_at": "2017-07-01T22:01:49.145Z"
            }
        ]

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Resource | Create [/api/v1/resources{?name,url,category,language,paid,notes,tags}]

+ Parameters

    + name (string, required) - Description of the resource
    + url (string, required) - Web address to access the resource
    + category (string, required) - General category grouping the resource
    + language (string, optional) - Programming language that best represents the resource
    + paid (boolean, optional) - If the resource is free or not
    + notes (text, optional) - A broader description of resource, its details, etc.
    + tags (string, optional) - Comma-separated list of tags to filter the search results on (i.e. "books, videos")

### Create a New Resource [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                name: 'Free videos site',
                url: 'free@videos.com',
                category: 'videos',
                language: 'multiple',
                paid: false,
                notes: 'some note',
                tags: "books, videos"
            }

+ Response 201 (application/json)

    + Body

            {
                resource: {
                    id: 1
                },
                tags: [
                    "books",
                    "videos"
                ]
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Resource | Update [/api/v1/resources/{resource_id}{?name,url,category,language,paid,notes,tags}]

+ Parameters

    + resource_id (number, required) - ID of the Resource in the form of an integer
    + name (string, required) - Description of the resource
    + url (string, required) - Web address to access the resource
    + category (string, required) - General category grouping the resource
    + language (string, optional) - Programming language that best represents the resource
    + paid (boolean, optional) - If the resource is free or not
    + notes (text, optional) - A broader description of resource, its details, etc.
    + tags (string, optional) - Comma-separated list of tags to filter the search results on (i.e. "books, videos")

### Update an Existing Resource [PUT]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                id: 1,
                name: 'Free videos site',
                url: 'free@videos.com',
                category: 'videos',
                language: 'multiple',
                paid: false,
                notes: 'some note',
                tags: 'books, videos'
            }

+ Response 200 (application/json)

    + Body

            {
                resource: {
                    id: 1
                },
                tags: [
                    "books",
                    "videos"
                ]
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Slack User | Invite [/api/v1/slack_users]

### Invite a User to Slack [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token

+ Response 200 (application/json)

    + Body

            {
                status: 200
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Tag | Collection [/api/v1/tags]

### List All Tags [GET]

+ Response 200 (application/json)

        [
            {
                "id": 3,
                "name": "books",
                "taggings_count": 0
            },
            {
                "id": 2,
                "name": "videos",
                "taggings_count": 0
            }
        ]

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Team Member | Collection [/api/v1/team_members]

### List All Team Members [GET]

+ Response 200 (application/json)

        [
            {
                "id": 65,
                "name": "Rick Rein",
                "role": "CTO",
                "created_at": "2017-06-30T15:05:39.242Z",
                "updated_at": "2017-06-30T15:05:39.242Z"
            },
            {
                "id": 66,
                "name": "Rob Kriner",
                "role": "Director of Marketing",
                "created_at": "2017-06-30T15:05:39.255Z",
                "updated_at": "2017-06-30T15:05:39.255Z"
            }
        ]

## Team Member | Create [/api/v1/team_members{?name,role}]

+ Parameters

    + name (string, required) - The team member's name
    + role (string, required) - The team member's role title

### Create a New Team Member [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                "name": "Alex Johnson",
                "role": "Board Member"
            }

+ Response 201 (application/json)

    + Body

            {
                "team_member": 1
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Team Member | Delete [/api/v1/team_members/{team_member_id}]

+ Parameters

    + team_member_id (number) - ID of the Team Member in the form of an integer

### Delete an Existing Team Member [DELETE]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                "id": 1
            }

+ Response 200 (application/json)

    + Body

            {
                status: 200
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Team Member | Update [/api/v1/team_members/{team_member_id}{?name,role}]

+ Parameters

    + team_member_id (number) - ID of the Team Member in the form of an integer
    + name (string, required) - The team member's name
    + role (string, required) - The team member's role title

### Update an Existing Team Member [PUT]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                "id": 1,
                "name": "Alex Johnson",
                "role": "Board Member"
            }

+ Response 200 (application/json)

    + Body

            {
                status: 200
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## User | Count By Location [/api/v1/users/by_location{?state,zip,city,lat_long,radius}]

### By Location [GET]

+ Parameters

    + state (string, optional) - String of comma-separated state abbreviations, i.e. 'TX', or 'TX, CA'
    + zip (string, optional) - String of comma-separated zip code(s), i.e. '80126', or '80126, 80203'
    + city (string, optional) - A string of a 'City, State, County' (i.e. 'Denver, CO, US')
    + lat_long (integer, optional) - Comma-separated integer latitude and longitude, i.e. 30.285648, -97.742052
    + radius (integer, optional) - Includes results within the radius' distance from the location, in miles.  Works in conjunction with city or lat_long, not zip code. Defaults to 20 miles, if not supplied.

+ Request (application/json)

    + Body

            {
                state: 'TX, CA'
            }

            /*or*/

            {
                zip: '80126, 80203'
            }

            /*or*/

            {
                city: 'Denver, CO, US'
            }

            /*or*/

            {
                city: 'Denver, CO, US',
                radius: 30
            }

            /*or*/

            {
                lat_long: 30.285648, -97.742052
            }

            /*or*/

            {
                lat_long: 30.285648, -97.742052,
                radius: 30
            }

+ Response 200 (application/json)

        {
            user_count: 2
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## User | Reset Password [/api/v1/users/passwords/reset{?email}]

+ Parameters

    + email (string, required) - The email address of the requesting User

### Reset the User's Password  [POST]

+ Request (application/json)

    + Body

            {
                "email": "frank@example.com"
            }

+ Response 200 (application/json)

    + Body

            {
                status: 200
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## User | Total Count [/api/v1/users]

### Total User Count [GET]

+ Request (application/json)

+ Response 200 (application/json)

        {
            user_count: 2
        }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Vote | Create [/api/v1/resources/{resource_id}/votes{?user_id}]

+ Parameters

    + resource_id (number, required) - ID of the Resource the User is voting on in the form of an integer
    + user_id (number, required) - ID of the user that is makig the vote

### Create a New Vote [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                "user_id": 1,
                "resource_id": 23
            }

+ Response 201 (application/json)

    + Body

            {
                "vote": 1
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }

## Vote | Delete [/api/v1/resources/{resource_id}/votes/{vote_id}]

+ Parameters

    + resource_id (number) - ID of the Resource the User is voting on in the form of an integer
    + vote_id (number) - ID of the Vote the User is deleting in the form of an integer

### Delete an Existing Vote [DELETE]

+ Request (application/json)

    + Headers

            Authorization: Bearer Access-Token


    + Body

            {
                "id": 1
            }

+ Response 200 (application/json)

    + Body

            {
                status: 200
            }

+ Response 422 (application/json)

        {
            errors: "Some error message"
        }
